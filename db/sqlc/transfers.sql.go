// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transfers.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
   to_account_id,
   amount
) VALUES (
  $1, $2, $3
)RETURNING id, from_account_id, to_account_id, amount, created_at, completed
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.Completed,
	)
	return i, err
}

const getTranfersfrom = `-- name: GetTranfersfrom :many
SELECT id, from_account_id, to_account_id, amount, created_at, completed FROM transfers
WHERE from_account_id = $1
ORDER BY id
`

func (q *Queries) GetTranfersfrom(ctx context.Context, fromAccountID int64) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTranfersfrom, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTranfersto = `-- name: GetTranfersto :many
SELECT id, from_account_id, to_account_id, amount, created_at, completed FROM transfers
WHERE to_account_id = $1
ORDER BY id
`

func (q *Queries) GetTranfersto(ctx context.Context, toAccountID int64) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTranfersto, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlltransfer = `-- name: ListAlltransfer :many
SELECT id, from_account_id, to_account_id, amount, created_at, completed FROM transfers
ORDER BY id
`

func (q *Queries) ListAlltransfer(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listAlltransfer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :exec
UPDATE transfers
set completed = $2
WHERE id = $1
RETURNING id, from_account_id, to_account_id, amount, created_at, completed
`

type UpdateTransferParams struct {
	ID        int64 `json:"id"`
	Completed bool  `json:"completed"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) error {
	_, err := q.db.ExecContext(ctx, updateTransfer, arg.ID, arg.Completed)
	return err
}
